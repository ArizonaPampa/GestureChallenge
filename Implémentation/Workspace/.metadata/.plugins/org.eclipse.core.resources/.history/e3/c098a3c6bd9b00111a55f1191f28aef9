package PlayerInterface;

import org.mt4j.components.TransformSpace;
import org.mt4j.util.MTColor;
import org.mt4j.util.math.Vector3D;

import physicsShapes.PhysicsShield;

import GameModel.Constants;
import GestureChallengeScene.GestureChallengeScene;

public class PlayerInterface {

	MTColor myColor;
	int myNumber;
	GestureChallengeScene myGCS;
	PlayerGoal myPG;
	PhysicsShield myPS;
	float angle;
	
	public PlayerInterface(MTColor color, int playerNumber,float angle,GestureChallengeScene gCS){
		
		//init
		myColor=color;
		myNumber=playerNumber;
		myGCS = gCS;
		
		//creation goals
		//System.out.println("angle = "+angle);
		float x = myGCS.getMTApplication().width/2f +(float) (Math.cos(angle)*Constants.radiusCenterGoals);
		float y = myGCS.getMTApplication().height/2f +(float) (Math.sin(angle)*Constants.radiusCenterGoals);
		myPG=new PlayerGoal(myGCS.getMTApplication(), new Vector3D(x,y), myGCS.getWorld(), myGCS.getScale(), myColor);
		myGCS.getPhysicsContainer().addChild(myPG);
		
		//creation shields
		x = x -(float) (Math.cos(angle)*Constants.shieldDistance);
		y = y -(float) (Math.sin(angle)*Constants.shieldDistance);
		float coveredAngle = (float) Math.toRadians(180/(float)playerNumber);
		System.out.println("deg : "+String.valueOf(180/((float)playerNumber)));
		System.out.println("rad :"+coveredAngle);
		myPS=new PhysicsShield(Constants.shieldBigRadius,Constants.shieldSmallRadius,Constants.shieldSmallDef,Constants.shieldBigDef,coveredAngle,new Vector3D(x,y),myGCS.getMTApplication(),myGCS.getWorld(),0f,0f,0f,myGCS.getScale(),color);
		myGCS.getPhysicsContainer().addChild(myPS);
		myPS.rotateZ(myPS.getCenterPointGlobal(), (float) Math.toDegrees(angle)+90,TransformSpace.GLOBAL);
		//myPS.setCenterRotation((float) Math.toDegrees(angle));
		//myPS.rotateZGlobal(myPS.getCenterPointGlobal(), (float) Math.toDegrees(angle));
	}
}
