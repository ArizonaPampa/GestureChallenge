package physicsShapes;

import org.jbox2d.dynamics.World;
import org.mt4j.util.math.Vector3D;
import org.mt4j.util.math.Vertex;

import processing.core.PApplet;

public class PhysicsShield extends PhysicsPolygon {

	
	public PhysicsShield(int bigRadius,int smallRadius, int smallDef,int bigDef, float coveredAngle,Vector3D position, PApplet applet,
			World world, float density, float friction, float restitution,
			float worldScale){
		super(null, position, applet, world, density, friction, restitution,
				worldScale);
		
		
		double twoPi = Math.PI*2;
		
		Vertex[] shieldVertices = new Vertex[smallDef+bigDef];
		
		int i;
		int j;
		for(i=0; i<smallDef;i++){
			shieldVertices[i]=new Vertex((float)(/*app.width/2f+*/Math.cos((Math.PI-coveredAngle)/2f+(i/(float)smallDef)*coveredAngle)*smallRadius),(float)(/*app.height/2f+*/Math.sin((Math.PI-coveredAngle)/2f+(i/(float)smallDef)*coveredAngle)*smallRadius));
			// c = new PhysicsCircle(app, shieldVertices[i], 2, world, 0, 0, 0, scale);
			//physicsContainer.addChild(c);

		}
		for(j=0; j<bigDef;j++){
			shieldVertices[i+j]=new Vertex((float)(/*app.width/2f+*/Math.cos((Math.PI-coveredAngle)/2f+((bigDef-(j+1))/(float)bigDef)*coveredAngle)*bigRadius),(float)(/*app.height/2f+*/Math.sin((Math.PI-coveredAngle)/2f+((bigDef-(j+1))/(float)bigDef)*coveredAngle)*bigRadius));
			//c = new PhysicsCircle(app, shieldVertices[i+j], 2, world, 0, 0, 0, scale);
			//physicsContainer.addChild(c);
		}
		
		//shieldVertices[smallDef+bigDef]=shieldVertices[0];
		
		for(int k=0;k<bigDef+smallDef;k++){
			System.out.println("V["+k+"]=("+shieldVertices[k].x+" "+shieldVertices[k].y+")");
		}	
		super.setVertices(shieldVertices);		
	}
	
	

}
